@{
    ViewData["Title"] = "OSM";
}
@using SetUpMapsHere.Models.Maps
@model OSMViewModel

<h1>Open Street Maps</h1>
<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
          integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
          crossorigin="" />
    <!-- Make sure you put this AFTER Leaflet's CSS -->
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
            integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
            crossorigin=""></script>
    <style>#mapid { height: 700px; }</style>
</head>

<body>
    <form id="form1" runat="server" asp-controller="Map" asp-action="OSM">
    </form>
    <div id="mapid">
    </div>
    <button onclick="getLocation()">Get Geolocation</button>
    <button onclick="random()">Text</button>
    <script src="~/lib/@@microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        	var mymap = L.map('mapid').setView([42.686, 23.319], 13);

            L.tileLayer
            ('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		        maxZoom: 18,
		        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                id: 'mapbox/streets-v11',
                accessToken: 'your.mapbox.access.token'
            }).addTo(mymap);

            var marker1 = L.marker([42.686, 23.319]).addTo(mymap);
            var marker2 = L.marker();
            var circle = L.circle([42.686, 23.320], {
                color: 'blue',
                fillColor: '#f03',
                fillOpacity: 0.2,
                radius: 100
            }).addTo(mymap);
            var polygon = L.polygon([
                [42.676, 23.320],
                [42.686, 23.320],
                [42.685, 23.318]]
            ).addTo(mymap);

            marker1.bindPopup("<b>Please</b><br>Only presentable stuff!").openPopup();
            var popup1 = L.popup()
                .setLatLng([42.664567, 23.305932])
                .setContent("Appropriate text")
                .openOn(mymap);

            var i = 0;
            function looper()
            {
                L.marker().setLatLng([42.674, 23.35 + i]).addTo(mymap);
                marker2.setLatLng([42.684, 23.318 - i]).addTo(mymap);
                i += 0.0005;
                if (true) {
                    setTimeout(looper, 1000)
                }
            }
            looper();

        var jsonroute = "@Model.JsonRoutes".replace(/&quot;/g, "\"");
        var routes = JSON.parse(jsonroute);

            function allroutes(json, index, arr)
            {
                L.polyline(json.coordinates, { color: json.ColorHex }).addTo(mymap);
            }
            routes.forEach(allroutes);


        var StopIcon = L.icon({
            iconUrl: "https://cdn3.iconfinder.com/data/icons/transport-29/100/22-512.png",

            iconSize: [40, 40], // size of the icon
            iconAnchor: [20, 40], // point of the icon which will correspond to marker's location
            popupAnchor: [0, -35]
        });

        var UserIcon = L.icon({
            iconUrl: "https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fmeridianapps.com%2Fimages%2Ficon_bludot%402x.png&f=1&nofb=1",

            iconSize: [40, 40],
            iconAnchor: [20,20]
        })

        var BusIcon = L.icon({
            iconUrl: "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn3.iconfinder.com%2Fdata%2Ficons%2Ftransportation%2F100%2Ftransportation__bus-512.png&f=1&nofb=1",

            iconSize: [30, 30],
            iconAnchor: [15, 15]
        });

        var jsonstops = "@Model.JsonStops".replace(/&quot;/g, "\"");
        var stops = JSON.parse(jsonstops);

            function allstops(stops, index, arr)
            {
                L.marker(stops.coordinates, { icon: StopIcon }).bindPopup(stops.StopList).addTo(mymap);
            }
            stops.forEach(allstops)

        var userlocation = L.marker({ icon: UserIcon });

            var popup = L.popup();
            function onMapClick(e)
            {
                alert(e.latlng)
                popup
                .setLatLng(e.latlng)
                .setContent(e.latlng.toString())
                .openOn(mymap);
            }

            mymap.on('click', onMapClick);
            function getLocation()
            {
                if (navigator.geolocation)
                {
                    navigator.geolocation.getCurrentPosition(showPosition);
                }
            }
            function showPosition(position)
            {
                alert(position.coords.latitude + " " + position.coords.longitude);
                userlocation.setLatLng([position.coords.latitude, position.coords.longitude]).setIcon(UserIcon).addTo(mymap);
            }
            function random()
            {
                alert(jsonstops)
                alert(stops[0].coordinates)
        }





        var connection = new signalR.HubConnectionBuilder().withUrl("/gps").build();
        var busarray = new Array();
        connection.on("DisplayDrivers", function (buses) {
            //alert(buses);
            //alert(buses[0]);
            //alert(buses[0].busLine);
            //alert(buses[0].location);
            buses.forEach(allbuses);
        });
        function allbuses(bus, index, arr) {
            alert(bus.location);
            L.marker(bus.location, { icon: BusIcon }).bindPopup(bus.busLine).addTo(mymap);
        }
        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

    </script>
    <h1>@Model.JsonStops</h1>
</body>